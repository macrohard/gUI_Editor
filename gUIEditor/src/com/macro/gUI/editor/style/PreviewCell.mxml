<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					clipAndEnableScrolling="true">
	<fx:Script>
		<![CDATA[
			import com.macro.gUI.assist.TextStyle;
			import com.macro.gUI.controls.Label;
			
			import flash.filters.BitmapFilter;
			
			
			private static const testStr:String = "这是一段测试文本，样式效果依赖TextStyle的设置\n如果multiline为false则此行不可见";
			
			private function getPreview():BitmapData
			{
//				var filter:String = '[new GlowFilter(0x000000, 1, 2, 2, 16), ' + 
//					'new GradientGlowFilter(0, 45, [0xFFFFFF, 0xFF0000, 0xFFFF00, 0x00CCFF], [0, 1, 1, 1], [0, 63, 126, 255], 50, 50, 2.5, 3, "outer", false), ' + 
//					'new DropShadowFilter(5, 45, 0, 1, 2, 2, 0.5)]';
				
				var style:TextStyle = new TextStyle();
				if (data.font != "")
					style.font = data.font;
				if (data.size != "")
					style.size = data.size;
				if (data.color != "")
					style.color = data.color;
				if (data.bold != "")
					style.bold = data.bold;
				if (data.italic != "")
					style.italic = data.italic;
				if (data.underline != "")
					style.underline = data.underline;
				if (data.align != "")
					style.align = data.align;
				if (data.leftMargin != "")
					style.leftMargin = data.leftMargin;
				if (data.rightMargin != "")
					style.rightMargin = data.rightMargin;
				if (data.indent != "")
					style.indent = data.indent;
				if (data.blockIndent != "")
					style.blockIndent = data.blockIndent;
				if (data.leading != "")
					style.leading = data.leading;
				if (data.kerning != "")
					style.kerning = data.kerning;
				if (data.letterSpacing != "")
					style.letterSpacing = data.letterSpacing;
				
				style.multiline = (data.multiline == "true");
				style.wordWrap = (data.wordWrap == "true");
				style.maxChars = int(data.maxChars);
				if (data.filters != "")
					style.filters = getFilters(data.filters);
				
				var label:Label = new Label(testStr);
				label.width = 100;
				label.style = style;
				return label.bitmapData;
			}
			
			
			/**
			 * 支持以基本类型为构造参数的滤镜，如：BevelFilter、BlurFilter、ColorMatrixFilter、
			 * ConvolutionFilter、DropShadowFilter、GlowFilter、GradientBevelFilter、
			 * GradientGlowFilter等等，不支持DisplacementMapFilter、ShaderFilter。
			 * @param str
			 * @return
			 *
			 */
			private function getFilters(str:String):Array
			{
				var filters:Array = new Array();
				
				var pattern:RegExp = /new (\w+)\((.*?)\)/ig;
				var result:Object = pattern.exec(str);
				
				while (result != null)
				{
					var className:String = result[1];
					var parameter:String = result[2];
					
					filters.push(createFilter(className, parameter));
					
					result = pattern.exec(str);
				}
				
				return filters;
			}
			
			private function createFilter(className:String, parameter:String):BitmapFilter
			{
				var clz:Class = getDefinitionByName("flash.filters." + className) as Class;
				var constructors:XMLList = describeType(clz).factory.constructor.parameter;
				
				var pattern:RegExp = /\s*/g;
				parameter = parameter.replace(pattern, "");
				
				var args:Array = [];
				for each (var xml:XML in constructors)
				{
					var type:String = xml.@type;
					
					var index:int;
					if (type == "int")
					{
						index = parameter.indexOf(",");
						index = index == -1 ? parameter.length : index;
						args.push(int(parameter.substr(0, index)));
					}
					else if (type == "uint")
					{
						index = parameter.indexOf(",");
						index = index == -1 ? parameter.length : index;
						args.push(uint(parameter.substr(0, index)));
					}
					else if (type == "Number")
					{
						index = parameter.indexOf(",");
						index = index == -1 ? parameter.length : index;
						args.push(Number(parameter.substr(0, index)));
					}
					else if (type == "Boolean")
					{
						index = parameter.indexOf(",");
						index = index == -1 ? parameter.length : index;
						args.push(parameter.substr(0, index) == "true");
					}
					else if (type == "String")
					{
						index = parameter.indexOf(",");
						index = index == -1 ? parameter.length : index;
						args.push(parameter.substring(1, index - 1));
					}
					else if (type == "Array")
					{
						var f:int = parameter.indexOf("[") + 1;
						var e:int = parameter.indexOf("]");
						var arr:Array = parameter.substring(f, e).split(",");
						var t:Array = [];
						for each (var s:String in arr)
						{
							t.push(Number(s));
						}
						args.push(t);
						index = parameter.indexOf(",", e);
						index = index == -1 ? parameter.length : index;
					}
					else
					{
						throw new Error("Unsupport parameter type!");
					}
					
					parameter = parameter.substr(index + 1);
					if (parameter.length == 0)
					{
						break;
					}
				}
				
				return newInstance(clz, args) as BitmapFilter;
			}
			
			private function newInstance(clz:Class, args:Array):Object
			{
				switch (args.length)
				{
					case 1:
						return new clz(args[0]);
					case 2:
						return new clz(args[0], args[1]);
					case 3:
						return new clz(args[0], args[1], args[2]);
					case 4:
						return new clz(args[0], args[1], args[2], args[3]);
					case 5:
						return new clz(args[0], args[1], args[2], args[3], args[4]);
					case 6:
						return new clz(args[0], args[1], args[2], args[3], args[4], args[5]);
					case 7:
						return new clz(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					case 8:
						return new clz(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
					case 9:
						return new clz(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
					case 10:
						return new clz(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
					case 11:
						return new clz(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]);
					case 12:
						return new clz(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10],
							args[11]);
					default:
						throw new Error("Unsupported number of Constructor args");
				}
			}
			
			override public function prepare(hasBeenRecycled:Boolean):void
			{
				if (data != null)
				{
					image.source = getPreview();
				}
			}
				
		]]>
	</fx:Script>
	<s:Image id="image" x="0" y="0" width="100%" height="100%" fillMode="clip"/>
</s:GridItemRenderer>
